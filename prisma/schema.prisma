// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// MVP Notification System Tables
model NotificationRule {
  id            String   @id @default(cuid())
  shop          String   // Which Shopify store
  productId     String   // Shopify product ID
  variantId     String?  // Optional: specific variant
  productTitle  String   // Cache product name for display
  variantTitle  String?  // Cache variant name for display
  threshold     Int      // Alert when inventory <= this number
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  channels      NotificationChannel[]
  logs          NotificationLog[]
  
  @@index([shop])
  @@index([shop, isActive])
}

model NotificationChannel {
  id            String   @id @default(cuid())
  ruleId        String
  email         String   // Recipient email
  createdAt     DateTime @default(now())
  
  // Relationships  
  rule          NotificationRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  @@index([ruleId])
}

model NotificationLog {
  id            String   @id @default(cuid())
  ruleId        String
  productTitle  String   // Cache for history
  oldQuantity   Int      // Previous inventory
  newQuantity   Int      // Current inventory
  threshold     Int      // Threshold that was breached
  emailsSent    Int      // How many emails sent
  sentAt        DateTime @default(now())
  
  // Relationships
  rule          NotificationRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  @@index([ruleId])
  @@index([sentAt])
}

// Analytics Data Storage with Retention and Encryption
model AnalyticsSnapshot {
  id            String   @id @default(cuid())
  shop          String   // Which Shopify store
  dataType      String   // 'revenue', 'products', 'inventory', etc.
  encryptedData String   // Encrypted JSON data
  metadata      String?  // Encrypted metadata (optional)
  createdAt     DateTime @default(now())
  expiresAt     DateTime // When this data should be deleted
  
  @@index([shop, dataType])
  @@index([expiresAt])
  @@index([createdAt])
}

// Product Analytics Cache (without order data)
model ProductAnalytics {
  id                String   @id @default(cuid())
  shop              String
  productId         String
  productTitle      String
  variantId         String?
  variantTitle      String?
  price             Float
  inventoryQuantity Int
  totalInventory    Int
  status            String
  lastUpdated       DateTime @default(now())
  expiresAt         DateTime // Data retention policy
  
  @@index([shop, productId])
  @@index([expiresAt])
  @@index([lastUpdated])
}

// Data Retention Policies
model DataRetentionPolicy {
  id          String   @id @default(cuid())
  shop        String
  dataType    String   // Type of data (analytics, logs, etc.)
  retentionDays Int    // How many days to keep data
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([shop, dataType])
  @@index([shop])
}

// Bulk Edit History System
model BulkEditBatch {
  id              String   @id @default(cuid())
  shop            String   // Which Shopify store
  operationType   String   // 'pricing', 'collections', 'tags', 'content', 'inventory', 'variants'
  operationName   String   // Human readable name like "Price Update", "Tag Addition"
  description     String?  // Optional description of the operation
  totalProducts   Int      // Number of products affected
  totalVariants   Int      // Number of variants affected
  createdAt       DateTime @default(now())
  canRevert       Boolean  @default(true)  // Whether this batch can be reverted
  isReverted      Boolean  @default(false) // Whether this batch has been reverted
  revertedAt      DateTime? // When it was reverted
  
  // Relationships
  items           BulkEditItem[]
  
  @@index([shop])
  @@index([shop, createdAt])
  @@index([operationType])
}

model BulkEditItem {
  id              String   @id @default(cuid())
  batchId         String
  productId       String   // Shopify product ID
  variantId       String?  // Shopify variant ID (if applicable)
  productTitle    String   // Cache product title
  variantTitle    String?  // Cache variant title (if applicable)
  fieldChanged    String   // Field that was changed (price, compareAtPrice, tags, etc.)
  oldValue        String?  // Previous value (JSON string for complex data)
  newValue        String?  // New value (JSON string for complex data)
  changeType      String   // 'update', 'add', 'remove'
  
  // Relationships
  batch           BulkEditBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  
  @@index([batchId])
  @@index([productId])
}

// GDPR Compliance Audit Trail
model ComplianceAudit {
  id          String   @id @default(cuid())
  shop        String   // Which Shopify store
  topic       String   // Type of compliance request
  customerId  String?  // Customer ID if applicable
  payload     String   // Full webhook payload (JSON)
  status      String   // 'received', 'processing', 'completed', 'error'
  response    String?  // Response data sent (for data requests)
  receivedAt  DateTime @default(now())
  completedAt DateTime?
  expiresAt   DateTime // 30 days from received date
  notes       String?  // Additional notes or error details
  
  @@index([shop])
  @@index([topic])
  @@index([receivedAt])
  @@index([expiresAt])
  @@index([status])
}
